#!/usr/bin/env python3

import os

# This function returns all the complete paths of the JSON reports.
def get_report_paths(root_path):

    folders = os.listdir(root_path)

    report_list = []

    for subfolder in folders:
        report_list.append(os.path.join(root_path, subfolder, "reports", "report.json"))
        
    return report_list

# The list of all malicious APIs from malapi.io
MALICIOUS_APIs = ["NtQueryInformationProcess",
"NtQuerySystemEnvironmentValueEx",
"EnumDesktopWindows",
"EnumWindows",
"NetShareEnum",
"NetShareGetInfo",
"NetShareCheck",
"GetAdaptersInfo",
"PathFileExistsA",
"GetNativeSystemInfo",
"RtlGetVersion",
"GetIpNetTable",
"GetLogicalDrives",
"GetDriveTypeA",
"RegEnumKeyA",
"WNetEnumResourceA",
"WNetCloseEnum",
"FindFirstUrlCacheEntryA",
"FindNextUrlCacheEntryA",
"WNetAddConnection2A",
"WNetAddConnectionA",
"EnumResourceTypesA",
"EnumResourceTypesExA",
"GetSystemTimeAsFileTime",
"GetThreadLocale",
"EnumSystemLocalesA",
"CreateFileMappingA",
"CreateProcessA",
"CreateRemoteThread",
"CreateRemoteThreadEx",
"GetModuleHandleA",
"GetProcAddress",
"GetThreadContext",
"HeapCreate",
"LoadLibraryA",
"LoadLibraryExA",
"LocalAlloc",
"MapViewOfFile",
"MapViewOfFile2",
"MapViewOfFile3",
"MapViewOfFileEx",
"OpenThread",
"Process32First",
"Process32Next",
"QueueUserAPC",
"ReadProcessMemory",
"ResumeThread",
"SetProcessDEPPolicy",
"SetThreadContext",
"SuspendThread",
"Thread32First",
"Thread32Next",
"Toolhelp32ReadProcessMemory",
"VirtualAlloc",
"VirtualAllocEx",
"VirtualProtect",
"VirtualProtectEx",
"WriteProcessMemory",
"VirtualAllocExNuma",
"VirtualAlloc2",
"VirtualAlloc2FromApp",
"VirtualAllocFromApp",
"VirtualProtectFromApp",
"CreateThread",
"WaitForSingleObject",
"OpenProcess",
"OpenFileMappingA",
"GetProcessHeap",
"GetProcessHeaps",
"HeapAlloc",
"HeapReAlloc",
"GlobalAlloc",
"AdjustTokenPrivileges",
"CreateProcessAsUserA",
"OpenProcessToken",
"CreateProcessWithTokenW",
"NtAdjustPrivilegesToken",
"NtAllocateVirtualMemory",
"NtContinue",
"NtCreateProcess",
"NtCreateProcessEx",
"NtCreateSection",
"NtCreateThread",
"NtCreateThreadEx",
"NtCreateUserProcess",
"NtDuplicateObject",
"NtMapViewOfSection",
"NtOpenProcess",
"NtOpenThread",
"NtProtectVirtualMemory",
"NtQueueApcThread",
"NtQueueApcThreadEx",
"NtQueueApcThreadEx2",
"NtReadVirtualMemory",
"NtResumeThread",
"NtUnmapViewOfSection",
"NtWaitForMultipleObjects",
"NtWaitForSingleObject",
"NtWriteVirtualMemory",
"RtlCreateHeap",
"LdrLoadDll",
"RtlMoveMemory",
"RtlCopyMemory",
"SetPropA",
"WaitForSingleObjectEx",
"WaitForMultipleObjects",
"WaitForMultipleObjectsEx",
"KeInsertQueueApc",
"Wow64SetThreadContext",
"NtSuspendProcess",
"NtResumeProcess",
"DuplicateToken",
"NtReadVirtualMemoryEx",
"CreateProcessInternal",
"EnumSystemLocalesA",
"UuidFromStringA",
"CreateFileMappingA",
"DeleteFileA",
"GetModuleHandleA",
"GetProcAddress",
"LoadLibraryA",
"LoadLibraryExA",
"LoadResource",
"SetEnvironmentVariableA",
"SetFileTime",
"Sleep",
"WaitForSingleObject",
"SetFileAttributesA",
"SleepEx",
"NtDelayExecution",
"NtWaitForMultipleObjects",
"NtWaitForSingleObject",
"CreateWindowExA",
"RegisterHotKey",
"timeSetEvent",
"IcmpSendEcho",
"WaitForSingleObjectEx",
"WaitForMultipleObjects",
"WaitForMultipleObjectsEx",
"SetWaitableTimer",
"CreateTimerQueueTimer",
"CreateWaitableTimer",
"SetWaitableTimer",
"SetTimer",
"Select",
"ImpersonateLoggedOnUser",
"SetThreadToken",
"DuplicateToken",
"SizeOfResource",
"LockResource",
"CreateProcessInternal",
"TimeGetTime",
"EnumSystemLocalesA",
"UuidFromStringA",
"AttachThreadInput",
"CallNextHookEx",
"GetAsyncKeyState",
"GetClipboardData",
"GetDC",
"GetDCEx",
"GetForegroundWindow",
"GetKeyboardState",
"GetKeyState",
"GetMessageA",
"GetRawInputData",
"GetWindowDC",
"MapVirtualKeyA",
"MapVirtualKeyExA",
"PeekMessageA",
"PostMessageA",
"PostThreadMessageA",
"RegisterHotKey",
"RegisterRawInputDevices",
"SendMessageA",
"SendMessageCallbackA",
"SendMessageTimeoutA",
"SendNotifyMessageA",
"SetWindowsHookExA",
"SetWinEventHook",
"UnhookWindowsHookEx",
"BitBlt",
"StretchBlt",
"GetKeynameTextA",
"WinExec",
"FtpPutFileA",
"HttpOpenRequestA",
"HttpSendRequestA",
"HttpSendRequestExA",
"InternetCloseHandle",
"InternetOpenA",
"InternetOpenUrlA",
"InternetReadFile",
"InternetReadFileExA",
"InternetWriteFile",
"URLDownloadToFile",
"URLDownloadToCacheFile",
"URLOpenBlockingStream",
"URLOpenStream",
"Accept",
"Bind",
"Connect",
"Gethostbyname",
"Inet_addr",
"Recv",
"Send",
"WSAStartup",
"Gethostname",
"Socket",
"WSACleanup",
"Listen",
"ShellExecuteA",
"ShellExecuteExA",
"DnsQuery_A",
"DnsQueryEx",
"WNetOpenEnumA",
"FindFirstUrlCacheEntryA",
"FindNextUrlCacheEntryA",
"InternetConnectA",
"InternetSetOptionA",
"WSASocketA",
"Closesocket",
"WSAIoctl",
"ioctlsocket",
"HttpAddRequestHeaders",
"CreateToolhelp32Snapshot",
"GetLogicalProcessorInformation",
"GetLogicalProcessorInformationEx",
"GetTickCount",
"OutputDebugStringA",
"CheckRemoteDebuggerPresent",
"Sleep",
"GetSystemTime",
"GetComputerNameA",
"SleepEx",
"IsDebuggerPresent",
"GetUserNameA",
"NtQueryInformationProcess",
"ExitWindowsEx",
"FindWindowA",
"FindWindowExA",
"GetForegroundWindow",
"GetTickCount64",
"QueryPerformanceFrequency",
"QueryPerformanceCounter",
"GetNativeSystemInfo",
"RtlGetVersion",
"GetSystemTimeAsFileTime",
"CountClipboardFormats",
"CryptAcquireContextA",
"EncryptFileA",
"CryptEncrypt",
"CryptDecrypt",
"CryptCreateHash",
"CryptHashData",
"CryptDeriveKey",
"CryptSetKeyParam",
"CryptGetHashParam",
"CryptSetKeyParam",
"CryptDestroyKey",
"CryptGenRandom",
"DecryptFileA",
"FlushEfsCache",
"GetLogicalDrives",
"GetDriveTypeA",
"CryptStringToBinary",
"CryptBinaryToString",
"CryptReleaseContext",
"CryptDestroyHash",
"EnumSystemLocalesA",
"ConnectNamedPipe",
"CopyFileA",
"CreateFileA",
"CreateMutexA",
"CreateMutexExA",
"DeviceIoControl",
"FindResourceA",
"FindResourceExA",
"GetModuleBaseNameA",
"GetModuleFileNameA",
"GetModuleFileNameExA",
"GetTempPathA",
"IsWoW64Process",
"MoveFileA",
"MoveFileExA",
"PeekNamedPipe",
"WriteFile",
"TerminateThread",
"CopyFile2",
"CopyFileExA",
"CreateFile2",
"GetTempFileNameA",
"TerminateProcess",
"SetCurrentDirectory",
"FindClose",
"SetThreadPriority",
"UnmapViewOfFile",
"ControlService",
"ControlServiceExA",
"CreateServiceA",
"DeleteService",
"OpenSCManagerA",
"OpenServiceA",
"RegOpenKeyA",
"RegOpenKeyExA",
"StartServiceA",
"StartServiceCtrlDispatcherA",
"RegCreateKeyExA",
"RegCreateKeyA",
"RegSetValueExA",
"RegSetKeyValueA",
"RegDeleteValueA",
"RegOpenKeyExA",
"RegEnumKeyExA",
"RegEnumValueA",
"RegGetValueA",
"RegFlushKey",
"RegGetKeySecurity",
"RegLoadKeyA",
"RegLoadMUIStringA",
"RegOpenCurrentUser",
"RegOpenKeyTransactedA",
"RegOpenUserClassesRoot",
"RegOverridePredefKey",
"RegReplaceKeyA",
"RegRestoreKeyA",
"RegSaveKeyA",
"RegSaveKeyExA",
"RegSetKeySecurity",
"RegUnLoadKeyA",
"RegConnectRegistryA",
"RegCopyTreeA",
"RegCreateKeyTransactedA",
"RegDeleteKeyA",
"RegDeleteKeyExA",
"RegDeleteKeyTransactedA",
"RegDeleteKeyValueA",
"RegDeleteTreeA",
"RegDeleteValueA",
"RegCloseKey",
"NtClose",
"NtCreateFile",
"NtDeleteKey",
"NtDeleteValueKey",
"NtMakeTemporaryObject",
"NtSetContextThread",
"NtSetInformationProcess",
"NtSetInformationThread",
"NtSetSystemEnvironmentValueEx",
"NtSetValueKey",
"NtShutdownSystem",
"NtTerminateProcess",
"NtTerminateThread",
"RtlSetProcessIsCritical",
"DrawTextExA",
"GetDesktopWindow",
"SetClipboardData",
"SetWindowLongA",
"SetWindowLongPtrA",
"OpenClipboard",
"SetForegroundWindow",
"BringWindowToTop",
"SetFocus",
"ShowWindow",
"NetShareSetInfo",
"NetShareAdd",
"NtQueryTimer",
"GetIpNetTable",
"GetLogicalDrives",
"GetDriveTypeA",
"CreatePipe",
"RegEnumKeyA",
"WNetOpenEnumA",
"WNetEnumResourceA",
"WNetAddConnection2A",
"CallWindowProcA",
"NtResumeProcess",
"lstrcatA",
"ImpersonateLoggedOnUser",
"SetThreadToken",
"SizeOfResource",
"LockResource",
"UuidFromStringA"]


import pandas as pd
import json

# This function extracts and structures data related to API calls and their arguments, and saves this data in separate JSON files.
def read_jsons(root_path, save_path):

    paths = get_report_paths(root_path)
    origin_save_path = save_path
    
    for path in paths:
        save_path = origin_save_path
        try:
            api_data = []
            if os.path.exists(path):
                data = pd.read_json(path, typ='dictionary')
                save_path = save_path + data['target']['file']['sha256'] + ".json"

                if not os.path.exists(save_path):
                    calls = data['behavior']['processes'][1]['calls']

                    for call in calls:
                        if call['api'] in MALICIOUS_APIs:
                            api_entry = {"api": call['api']}
                        if not not call['arguments']:
                            api_entry["arguments"] = call['arguments']
                        api_data.append(api_entry)

                    with open(save_path, 'w') as json_file:
                        json.dump(api_data, json_file, indent=4)
                
        except Exception as ex:
            print(f"Error: {str(ex)}")
        

def main():
    ROOT = "/media/nico/6790BDD20E524E22/ramsonware_dataset/reports"
    SAVE_PATH = os.path.expanduser("~/Desktop/Thesis/APIs")

    read_jsons(ROOT, SAVE_PATH)

if __name__ == "__main__":
    main()