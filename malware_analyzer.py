#!/usr/bin/env python3

from analyzer import get_report_paths
import pandas as pd

# Extracts opened and read unique registry keys.
def get_registry_keys(data):
        
    regkeys = []
    
    generic_event = data['behavior']['generic']

    for event in generic_event:
        if 'summary' in event and 'regkey_opened' in event['summary']:
            regkey_opened = event['summary']['regkey_opened']
            for regkey_o in regkey_opened:
                if regkey_o not in regkeys:
                    regkeys.append(regkey_o)
        
        if 'summary' in event and 'regkey_read' in event['summary']:
            regkey_read = event['summary']['regkey_read']
            for regkey_r in regkey_read:
                if regkey_r not in regkeys:
                    regkeys.append(regkey_r)

    return regkeys

import os
import ast

# Counts the occurences of each registry key for each sample and saves them.
def count_registry_calls(data, regkeys, save_path, option):
    
    registry_count = {}

    match option:
        case 1:
            api_data = []
            calls = data['behavior']['processes'][1]['calls']

            for call in calls:
                api_data.append({"api": call['api'], "arguments": call['arguments']})

            save_path = save_path + data['target']['file']['sha256'] + ".txt"

            if not os.path.exists(save_path):
                with open(save_path, 'w') as file:
                    for api in api_data:
                        if 'regkey' in api['arguments']:
                            if api['arguments']['regkey'] in regkeys:
                                if api['arguments']['regkey'] in registry_count:
                                    registry_count[api['arguments']['regkey']] += 1
                                else:
                                    registry_count[api['arguments']['regkey']] = 1
                    file.write(f"{registry_count}")
            return registry_count
        
        case 2:
            old_path = save_path
            regs = []
            for filename in os.listdir(old_path):
                if filename.endswith(".txt"):
                    file_path = os.path.join(old_path, filename)

                    with open(file_path, 'r') as file:
                        content = file.read()
                        regs.append(ast.literal_eval(content))
            
            return regs

def main():
    ROOT = "/media/nico/6790BDD20E524E22/ramsonware_dataset/reports"
    paths = get_report_paths(ROOT)
    OPTION = 2

    reg_calls = []

    match OPTION:
        case 1:
            for path in paths:
                try:
                    SAVE_PATH = "/home/nico/Desktop/Thesis/Regkeys/"
                    data = pd.read_json(path, typ='dictionary')
                    reg_calls.append(count_registry_calls(data, get_registry_keys(data), SAVE_PATH, OPTION))
            
                except Exception as ex:
                    print(f"Error: {str(ex)}")
                    continue
    
        case 2:
            try:
                SAVE_PATH = "/home/nico/Desktop/Thesis/Regkeys/"
                reg_calls = count_registry_calls(None, None, SAVE_PATH, OPTION)

            except Exception as ex:
                print(f"Error: {str(ex)}")
    
    sum_dict = {}
    for data_dict in reg_calls:
        for key, value in data_dict.items():
            if key in sum_dict:
                sum_dict[key] += value
            else:
                sum_dict[key] = value

    with open("/home/nico/Desktop/Thesis/RegCount.txt", 'w') as file:
        sum_dict = {k: v for k, v in sorted(sum_dict.items(), key=lambda item: item[1], reverse=True)}
        for key, total in sum_dict.items():
            file.write(f'{key}: {total}\n')

if __name__ == "__main__":
    main()